import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef } from '@angular/core';
import { ArrayBase, ComplexBase, ComponentBase, ComponentMixins, Template, setValue } from '@syncfusion/ej2-angular-base';
import { BpmnDiagrams, ComplexHierarchicalTree, ConnectorBridging, ConnectorEditing, DataBinding, Diagram, DiagramContextMenu, HierarchicalTree, LayoutAnimation, LineRouting, MindMap, Overview, PrintAndExport, RadialTree, Snapping, SymbolPalette, SymmetricLayout, UndoRedo } from '@syncfusion/ej2-diagrams';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';

const _c0 = ["annotationTemplate"];
const _c1 = ["nodeTemplate"];
let input = ['addInfo', 'id', 'lock', 'objects', 'visible', 'zIndex'];
let outputs = [];
/**
 * Layers Directive
 * ```html
 * <e-layers>
 * <e-layer></e-layer>
 * </e-layers>
 * ```
 */
class LayerDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
LayerDirective.ɵfac = function LayerDirective_Factory(t) { return new (t || LayerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
LayerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LayerDirective, selectors: [["e-layer"]], inputs: { addInfo: "addInfo", id: "id", lock: "lock", objects: "objects", visible: "visible", zIndex: "zIndex" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
LayerDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Layer Array Directive
 */
class LayersDirective extends ArrayBase {
    constructor() {
        super('layers');
    }
}
LayersDirective.ɵfac = function LayersDirective_Factory(t) { return new (t || LayersDirective)(); };
LayersDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LayersDirective, selectors: [["e-layers"]], contentQueries: function LayersDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, LayerDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
LayersDirective.ctorParameters = () => [];

let input$1 = ['action', 'cursor'];
let outputs$1 = [];
/**
 * Cursor Maps Directive
 * ```html
 * <e-cusrsormaps>
 * <e-cursormap></e-cursormap>
 * </e-cursormaps>
 * ```
 */
class CustomCursorDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$1);
        this.directivePropList = input$1;
    }
}
CustomCursorDirective.ɵfac = function CustomCursorDirective_Factory(t) { return new (t || CustomCursorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
CustomCursorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CustomCursorDirective, selectors: [["e-cursormap"]], inputs: { action: "action", cursor: "cursor" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
CustomCursorDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * CustomCursor Array Directive
 */
class CustomCursorsDirective extends ArrayBase {
    constructor() {
        super('customcursor');
    }
}
CustomCursorsDirective.ɵfac = function CustomCursorsDirective_Factory(t) { return new (t || CustomCursorsDirective)(); };
CustomCursorsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CustomCursorsDirective, selectors: [["e-cursormaps"]], contentQueries: function CustomCursorsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomCursorDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
CustomCursorsDirective.ctorParameters = () => [];

let input$2 = ['addInfo', 'alignment', 'annotationType', 'constraints', 'content', 'displacement', 'dragLimit', 'height', 'horizontalAlignment', 'hyperlink', 'id', 'margin', 'offset', 'rotateAngle', 'segmentAngle', 'style', 'template', 'type', 'verticalAlignment', 'visibility', 'width'];
let outputs$2 = [];
/**
 * Connectors Directive
 * ```html
 * <e-connectors>
 * <e-connector>
 * <e-connector-annotations>
 * <e-connector-annotation>
 * </e-connector-annotation>
 * </e-connector-annotations>
 * </e-connector>
 * </e-connectors>
 * ```
 */
class ConnectorAnnotationDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$2);
        this.directivePropList = input$2;
    }
}
ConnectorAnnotationDirective.ɵfac = function ConnectorAnnotationDirective_Factory(t) { return new (t || ConnectorAnnotationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ConnectorAnnotationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ConnectorAnnotationDirective, selectors: [["e-connector-annotation"]], inputs: { addInfo: "addInfo", alignment: "alignment", annotationType: "annotationType", constraints: "constraints", content: "content", displacement: "displacement", dragLimit: "dragLimit", height: "height", horizontalAlignment: "horizontalAlignment", hyperlink: "hyperlink", id: "id", margin: "margin", offset: "offset", rotateAngle: "rotateAngle", segmentAngle: "segmentAngle", style: "style", template: "template", type: "type", verticalAlignment: "verticalAlignment", visibility: "visibility", width: "width" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ConnectorAnnotationDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * ConnectorAnnotation Array Directive
 */
class ConnectorAnnotationsDirective extends ArrayBase {
    constructor() {
        super('annotations');
    }
}
ConnectorAnnotationsDirective.ɵfac = function ConnectorAnnotationsDirective_Factory(t) { return new (t || ConnectorAnnotationsDirective)(); };
ConnectorAnnotationsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ConnectorAnnotationsDirective, selectors: [["e-connector-annotations"]], contentQueries: function ConnectorAnnotationsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ConnectorAnnotationDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ConnectorAnnotationsDirective.ctorParameters = () => [];

let input$3 = ['addInfo', 'annotations', 'bridgeSpace', 'connectionPadding', 'constraints', 'cornerRadius', 'dragSize', 'excludeFromLayout', 'flip', 'hitPadding', 'id', 'margin', 'previewSize', 'segments', 'shape', 'sourceDecorator', 'sourceID', 'sourcePadding', 'sourcePoint', 'sourcePortID', 'style', 'targetDecorator', 'targetID', 'targetPadding', 'targetPoint', 'targetPortID', 'tooltip', 'type', 'visible', 'wrapper', 'zIndex'];
let outputs$3 = [];
/**
 * Connectors Directive
 * ```html
 * <e-connectors>
 * <e-connector></e-connector>
 * </e-connectors>
 * ```
 */
class ConnectorDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['annotations'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$3);
        this.directivePropList = input$3;
    }
}
ConnectorDirective.ɵfac = function ConnectorDirective_Factory(t) { return new (t || ConnectorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ConnectorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ConnectorDirective, selectors: [["e-connector"]], contentQueries: function ConnectorDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ConnectorAnnotationsDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childAnnotations = _t.first);
    } }, inputs: { addInfo: "addInfo", annotations: "annotations", bridgeSpace: "bridgeSpace", connectionPadding: "connectionPadding", constraints: "constraints", cornerRadius: "cornerRadius", dragSize: "dragSize", excludeFromLayout: "excludeFromLayout", flip: "flip", hitPadding: "hitPadding", id: "id", margin: "margin", previewSize: "previewSize", segments: "segments", shape: "shape", sourceDecorator: "sourceDecorator", sourceID: "sourceID", sourcePadding: "sourcePadding", sourcePoint: "sourcePoint", sourcePortID: "sourcePortID", style: "style", targetDecorator: "targetDecorator", targetID: "targetID", targetPadding: "targetPadding", targetPoint: "targetPoint", targetPortID: "targetPortID", tooltip: "tooltip", type: "type", visible: "visible", wrapper: "wrapper", zIndex: "zIndex" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ConnectorDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Connector Array Directive
 */
class ConnectorsDirective extends ArrayBase {
    constructor() {
        super('connectors');
    }
}
ConnectorsDirective.ɵfac = function ConnectorsDirective_Factory(t) { return new (t || ConnectorsDirective)(); };
ConnectorsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ConnectorsDirective, selectors: [["e-connectors"]], contentQueries: function ConnectorsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ConnectorDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ConnectorsDirective.ctorParameters = () => [];

let input$4 = ['addInfo', 'annotationType', 'constraints', 'content', 'dragLimit', 'height', 'horizontalAlignment', 'hyperlink', 'id', 'margin', 'offset', 'rotateAngle', 'style', 'template', 'type', 'verticalAlignment', 'visibility', 'width'];
let outputs$4 = [];
/**
 * Nodes Directive
 * ```html
 * <e-nodes>
 * <e-node>
 * <e-node-annotations>
 * <e-node-annotation>
 * </e-node-annotation>
 * </e-node-annotations>
 * </e-node>
 * </e-nodes>
 * ```
 */
class NodeAnnotationDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$4);
        this.directivePropList = input$4;
    }
}
NodeAnnotationDirective.ɵfac = function NodeAnnotationDirective_Factory(t) { return new (t || NodeAnnotationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
NodeAnnotationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeAnnotationDirective, selectors: [["e-node-annotation"]], inputs: { addInfo: "addInfo", annotationType: "annotationType", constraints: "constraints", content: "content", dragLimit: "dragLimit", height: "height", horizontalAlignment: "horizontalAlignment", hyperlink: "hyperlink", id: "id", margin: "margin", offset: "offset", rotateAngle: "rotateAngle", style: "style", template: "template", type: "type", verticalAlignment: "verticalAlignment", visibility: "visibility", width: "width" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
NodeAnnotationDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * NodeAnnotation Array Directive
 */
class NodeAnnotationsDirective extends ArrayBase {
    constructor() {
        super('annotations');
    }
}
NodeAnnotationsDirective.ɵfac = function NodeAnnotationsDirective_Factory(t) { return new (t || NodeAnnotationsDirective)(); };
NodeAnnotationsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeAnnotationsDirective, selectors: [["e-node-annotations"]], contentQueries: function NodeAnnotationsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NodeAnnotationDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
NodeAnnotationsDirective.ctorParameters = () => [];

let input$5 = ['addInfo', 'constraints', 'height', 'horizontalAlignment', 'id', 'inEdges', 'margin', 'offset', 'outEdges', 'pathData', 'shape', 'style', 'verticalAlignment', 'visibility', 'width'];
let outputs$5 = [];
/**
 * Nodes Directive
 * ```html
 * <e-nodes>
 * <e-node>
 * <e-node-ports>
 * <e-node-port>
 * </e-node-port>
 * </e-node-ports>
 * </e-node>
 * </e-nodes>
 * ```
 */
class PortDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$5);
        this.directivePropList = input$5;
    }
}
PortDirective.ɵfac = function PortDirective_Factory(t) { return new (t || PortDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
PortDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortDirective, selectors: [["e-node-port"]], inputs: { addInfo: "addInfo", constraints: "constraints", height: "height", horizontalAlignment: "horizontalAlignment", id: "id", inEdges: "inEdges", margin: "margin", offset: "offset", outEdges: "outEdges", pathData: "pathData", shape: "shape", style: "style", verticalAlignment: "verticalAlignment", visibility: "visibility", width: "width" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
PortDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Port Array Directive
 */
class PortsDirective extends ArrayBase {
    constructor() {
        super('ports');
    }
}
PortsDirective.ɵfac = function PortsDirective_Factory(t) { return new (t || PortsDirective)(); };
PortsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortsDirective, selectors: [["e-node-ports"]], contentQueries: function PortsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, PortDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
PortsDirective.ctorParameters = () => [];

let input$6 = ['addInfo', 'annotations', 'backgroundColor', 'borderColor', 'borderWidth', 'branch', 'children', 'collapseIcon', 'columnIndex', 'columnSpan', 'columns', 'constraints', 'container', 'data', 'dragSize', 'excludeFromLayout', 'expandIcon', 'flip', 'height', 'horizontalAlignment', 'id', 'isExpanded', 'layoutInfo', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'offsetX', 'offsetY', 'pivot', 'ports', 'previewSize', 'rotateAngle', 'rowIndex', 'rowSpan', 'rows', 'shadow', 'shape', 'style', 'tooltip', 'verticalAlignment', 'visible', 'width', 'wrapper', 'zIndex'];
let outputs$6 = [];
/**
 * Nodes Directive
 * ```html
 * <e-nodes>
 * <e-node></e-node>
 * </e-nodes>
 * ```
 */
class NodeDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['annotations', 'ports'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$6);
        this.directivePropList = input$6;
    }
}
NodeDirective.ɵfac = function NodeDirective_Factory(t) { return new (t || NodeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
NodeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeDirective, selectors: [["e-node"]], contentQueries: function NodeDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NodeAnnotationsDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, PortsDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childAnnotations = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childPorts = _t.first);
    } }, inputs: { addInfo: "addInfo", annotations: "annotations", backgroundColor: "backgroundColor", borderColor: "borderColor", borderWidth: "borderWidth", branch: "branch", children: "children", collapseIcon: "collapseIcon", columnIndex: "columnIndex", columnSpan: "columnSpan", columns: "columns", constraints: "constraints", container: "container", data: "data", dragSize: "dragSize", excludeFromLayout: "excludeFromLayout", expandIcon: "expandIcon", flip: "flip", height: "height", horizontalAlignment: "horizontalAlignment", id: "id", isExpanded: "isExpanded", layoutInfo: "layoutInfo", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", offsetX: "offsetX", offsetY: "offsetY", pivot: "pivot", ports: "ports", previewSize: "previewSize", rotateAngle: "rotateAngle", rowIndex: "rowIndex", rowSpan: "rowSpan", rows: "rows", shadow: "shadow", shape: "shape", style: "style", tooltip: "tooltip", verticalAlignment: "verticalAlignment", visible: "visible", width: "width", wrapper: "wrapper", zIndex: "zIndex" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
NodeDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Node Array Directive
 */
class NodesDirective extends ArrayBase {
    constructor() {
        super('nodes');
    }
}
NodesDirective.ɵfac = function NodesDirective_Factory(t) { return new (t || NodesDirective)(); };
NodesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodesDirective, selectors: [["e-nodes"]], contentQueries: function NodesDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NodeDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
NodesDirective.ctorParameters = () => [];

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const inputs = ['addInfo', 'annotationTemplate', 'backgroundColor', 'bridgeDirection', 'commandManager', 'connectorDefaults', 'connectors', 'constraints', 'contextMenuSettings', 'customCursor', 'dataSourceSettings', 'drawingObject', 'enablePersistence', 'enableRtl', 'getConnectorDefaults', 'getCustomCursor', 'getCustomProperty', 'getCustomTool', 'getDescription', 'getNodeDefaults', 'height', 'historyManager', 'layers', 'layout', 'locale', 'mode', 'nodeDefaults', 'nodeTemplate', 'nodes', 'pageSettings', 'rulerSettings', 'scrollSettings', 'selectedItems', 'serializationSettings', 'setNodeTemplate', 'snapSettings', 'tool', 'tooltip', 'updateSelection', 'width'];
const outputs$7 = ['animationComplete', 'click', 'collectionChange', 'commandExecute', 'connectionChange', 'contextMenuBeforeItemRender', 'contextMenuClick', 'contextMenuOpen', 'created', 'dataLoaded', 'doubleClick', 'dragEnter', 'dragLeave', 'dragOver', 'drop', 'expandStateChange', 'historyChange', 'historyStateChange', 'keyDown', 'keyUp', 'mouseEnter', 'mouseLeave', 'mouseOver', 'onImageLoad', 'onUserHandleMouseDown', 'onUserHandleMouseEnter', 'onUserHandleMouseLeave', 'onUserHandleMouseUp', 'positionChange', 'propertyChange', 'rotateChange', 'scrollChange', 'segmentCollectionChange', 'selectionChange', 'sizeChange', 'sourcePointChange', 'targetPointChange', 'textEdit'];
const twoWays = [''];
/**
 * Diagram Component
 * ```html
 * <ej-diagram></ej-diagram>
 * ```
 */
let DiagramComponent = class DiagramComponent extends Diagram {
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    constructor(ngEle, srenderer, viewContainerRef, injector) {
        super();
        this.ngEle = ngEle;
        this.srenderer = srenderer;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.tags = ['layers', 'customCursor', 'connectors', 'nodes'];
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        try {
            let mod = this.injector.get('DiagramsHierarchicalTree');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_a) { }
        try {
            let mod = this.injector.get('DiagramsMindMap');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_b) { }
        try {
            let mod = this.injector.get('DiagramsRadialTree');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_c) { }
        try {
            let mod = this.injector.get('DiagramsComplexHierarchicalTree');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_d) { }
        try {
            let mod = this.injector.get('DiagramsDataBinding');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_e) { }
        try {
            let mod = this.injector.get('DiagramsSnapping');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_f) { }
        try {
            let mod = this.injector.get('DiagramsPrintAndExport');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_g) { }
        try {
            let mod = this.injector.get('DiagramsBpmnDiagrams');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_h) { }
        try {
            let mod = this.injector.get('DiagramsSymmetricLayout');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_j) { }
        try {
            let mod = this.injector.get('DiagramsConnectorBridging');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_k) { }
        try {
            let mod = this.injector.get('DiagramsUndoRedo');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_l) { }
        try {
            let mod = this.injector.get('DiagramsLayoutAnimation');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_m) { }
        try {
            let mod = this.injector.get('DiagramsDiagramContextMenu');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_o) { }
        try {
            let mod = this.injector.get('DiagramsLineRouting');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_p) { }
        try {
            let mod = this.injector.get('DiagramsConnectorEditing');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_q) { }
        this.registerEvents(outputs$7);
        this.addTwoWay.call(this, twoWays);
        setValue('currentInstance', this, this.viewContainerRef);
        this.context = new ComponentBase();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.context.ngOnInit(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.context.ngAfterViewInit(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.context.ngOnDestroy(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.tagObjects[0].instance = this.childLayers;
        if (this.childCustomCursor) {
            this.tagObjects[1].instance = this.childCustomCursor;
        }
        if (this.childConnectors) {
            this.tagObjects[2].instance = this.childConnectors;
        }
        if (this.childNodes) {
            this.tagObjects[3].instance = this.childNodes;
        }
        this.context.ngAfterContentChecked(this);
    }
};
DiagramComponent.ɵfac = function DiagramComponent_Factory(t) { return new (t || DiagramComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
DiagramComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DiagramComponent, selectors: [["ejs-diagram"]], contentQueries: function DiagramComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, LayersDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomCursorsDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ConnectorsDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NodesDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.annotationTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childLayers = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childCustomCursor = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childConnectors = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childNodes = _t.first);
    } }, inputs: { addInfo: "addInfo", annotationTemplate: "annotationTemplate", backgroundColor: "backgroundColor", bridgeDirection: "bridgeDirection", commandManager: "commandManager", connectorDefaults: "connectorDefaults", connectors: "connectors", constraints: "constraints", contextMenuSettings: "contextMenuSettings", customCursor: "customCursor", dataSourceSettings: "dataSourceSettings", drawingObject: "drawingObject", enablePersistence: "enablePersistence", enableRtl: "enableRtl", getConnectorDefaults: "getConnectorDefaults", getCustomCursor: "getCustomCursor", getCustomProperty: "getCustomProperty", getCustomTool: "getCustomTool", getDescription: "getDescription", getNodeDefaults: "getNodeDefaults", height: "height", historyManager: "historyManager", layers: "layers", layout: "layout", locale: "locale", mode: "mode", nodeDefaults: "nodeDefaults", nodeTemplate: "nodeTemplate", nodes: "nodes", pageSettings: "pageSettings", rulerSettings: "rulerSettings", scrollSettings: "scrollSettings", selectedItems: "selectedItems", serializationSettings: "serializationSettings", setNodeTemplate: "setNodeTemplate", snapSettings: "snapSettings", tool: "tool", tooltip: "tooltip", updateSelection: "updateSelection", width: "width" }, outputs: { animationComplete: "animationComplete", click: "click", collectionChange: "collectionChange", commandExecute: "commandExecute", connectionChange: "connectionChange", contextMenuBeforeItemRender: "contextMenuBeforeItemRender", contextMenuClick: "contextMenuClick", contextMenuOpen: "contextMenuOpen", created: "created", dataLoaded: "dataLoaded", doubleClick: "doubleClick", dragEnter: "dragEnter", dragLeave: "dragLeave", dragOver: "dragOver", drop: "drop", expandStateChange: "expandStateChange", historyChange: "historyChange", historyStateChange: "historyStateChange", keyDown: "keyDown", keyUp: "keyUp", mouseEnter: "mouseEnter", mouseLeave: "mouseLeave", mouseOver: "mouseOver", onImageLoad: "onImageLoad", onUserHandleMouseDown: "onUserHandleMouseDown", onUserHandleMouseEnter: "onUserHandleMouseEnter", onUserHandleMouseLeave: "onUserHandleMouseLeave", onUserHandleMouseUp: "onUserHandleMouseUp", positionChange: "positionChange", propertyChange: "propertyChange", rotateChange: "rotateChange", scrollChange: "scrollChange", segmentCollectionChange: "segmentCollectionChange", selectionChange: "selectionChange", sizeChange: "sizeChange", sourcePointChange: "sourcePointChange", targetPointChange: "targetPointChange", textEdit: "textEdit" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DiagramComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/**
 * @nocollapse
 */
DiagramComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
];
DiagramComponent.propDecorators = {
    'annotationTemplate': [{ type: ContentChild, args: ['annotationTemplate',] },],
    'nodeTemplate': [{ type: ContentChild, args: ['nodeTemplate',] },],
};
__decorate([
    Template(),
    __metadata("design:type", Object)
], DiagramComponent.prototype, "annotationTemplate", void 0);
__decorate([
    Template(),
    __metadata("design:type", Object)
], DiagramComponent.prototype, "nodeTemplate", void 0);
DiagramComponent = __decorate([
    ComponentMixins([ComponentBase]),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], DiagramComponent);

/**
 * NgModule definition for the Diagram component.
 */
class DiagramModule {
}
DiagramModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DiagramModule });
DiagramModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DiagramModule_Factory(t) { return new (t || DiagramModule)(); }, imports: [[CommonModule]] });
/**
 * @nocollapse
 */
DiagramModule.ctorParameters = () => [];

const HierarchicalTreeService = { provide: 'DiagramsHierarchicalTree', useValue: HierarchicalTree };
const MindMapService = { provide: 'DiagramsMindMap', useValue: MindMap };
const RadialTreeService = { provide: 'DiagramsRadialTree', useValue: RadialTree };
const ComplexHierarchicalTreeService = { provide: 'DiagramsComplexHierarchicalTree', useValue: ComplexHierarchicalTree };
const DataBindingService = { provide: 'DiagramsDataBinding', useValue: DataBinding };
const SnappingService = { provide: 'DiagramsSnapping', useValue: Snapping };
const PrintAndExportService = { provide: 'DiagramsPrintAndExport', useValue: PrintAndExport };
const BpmnDiagramsService = { provide: 'DiagramsBpmnDiagrams', useValue: BpmnDiagrams };
const SymmetricLayoutService = { provide: 'DiagramsSymmetricLayout', useValue: SymmetricLayout };
const ConnectorBridgingService = { provide: 'DiagramsConnectorBridging', useValue: ConnectorBridging };
const UndoRedoService = { provide: 'DiagramsUndoRedo', useValue: UndoRedo };
const LayoutAnimationService = { provide: 'DiagramsLayoutAnimation', useValue: LayoutAnimation };
const DiagramContextMenuService = { provide: 'DiagramsDiagramContextMenu', useValue: DiagramContextMenu };
const LineRoutingService = { provide: 'DiagramsLineRouting', useValue: LineRouting };
const ConnectorEditingService = { provide: 'DiagramsConnectorEditing', useValue: ConnectorEditing };
/**
 * NgModule definition for the Diagram component with providers.
 */
class DiagramAllModule {
}
DiagramAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DiagramAllModule });
DiagramAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DiagramAllModule_Factory(t) { return new (t || DiagramAllModule)(); }, providers: [
        HierarchicalTreeService,
        MindMapService,
        RadialTreeService,
        ComplexHierarchicalTreeService,
        DataBindingService,
        SnappingService,
        PrintAndExportService,
        BpmnDiagramsService,
        SymmetricLayoutService,
        ConnectorBridgingService,
        UndoRedoService,
        LayoutAnimationService,
        DiagramContextMenuService,
        LineRoutingService,
        ConnectorEditingService
    ], imports: [[CommonModule, DiagramModule],
        DiagramModule] });
/**
 * @nocollapse
 */
DiagramAllModule.ctorParameters = () => [];

let input$7 = ['expanded', 'height', 'iconCss', 'id', 'symbols', 'title'];
let outputs$8 = [];
/**
 * Palette Directive
 * ```html
 * <e-palettes><e-palette></e-palette><e-palettes>
 * ```
 */
class PaletteDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$8);
        this.directivePropList = input$7;
    }
}
PaletteDirective.ɵfac = function PaletteDirective_Factory(t) { return new (t || PaletteDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
PaletteDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PaletteDirective, selectors: [["e-palette"]], inputs: { expanded: "expanded", height: "height", iconCss: "iconCss", id: "id", symbols: "symbols", title: "title" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
PaletteDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * Palette Array Directive
 */
class PalettesDirective extends ArrayBase {
    constructor() {
        super('palettes');
    }
}
PalettesDirective.ɵfac = function PalettesDirective_Factory(t) { return new (t || PalettesDirective)(); };
PalettesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PalettesDirective, selectors: [["e-palettes"]], contentQueries: function PalettesDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, PaletteDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
PalettesDirective.ctorParameters = () => [];

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const inputs$1 = ['accessKey', 'allowDrag', 'connectorDefaults', 'enableAnimation', 'enablePersistence', 'enableRtl', 'enableSearch', 'expandMode', 'filterSymbols', 'getConnectorDefaults', 'getNodeDefaults', 'getSymbolInfo', 'getSymbolTemplate', 'height', 'ignoreSymbolsOnSearch', 'locale', 'nodeDefaults', 'palettes', 'symbolDragSize', 'symbolHeight', 'symbolInfo', 'symbolMargin', 'symbolPreview', 'symbolWidth', 'width'];
const outputs$9 = ['paletteSelectionChange'];
const twoWays$1 = [''];
/**
 * SymbolPalette Component
 * ```html
 * <ej-symbol-palette></ej-symbol-palette>
 * ```
 */
let SymbolPaletteComponent = class SymbolPaletteComponent extends SymbolPalette {
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    constructor(ngEle, srenderer, viewContainerRef, injector) {
        super();
        this.ngEle = ngEle;
        this.srenderer = srenderer;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.tags = ['palettes'];
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        try {
            let mod = this.injector.get('DiagramsBpmnDiagrams');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_a) { }
        this.registerEvents(outputs$9);
        this.addTwoWay.call(this, twoWays$1);
        setValue('currentInstance', this, this.viewContainerRef);
        this.context = new ComponentBase();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.context.ngOnInit(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.context.ngAfterViewInit(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.context.ngOnDestroy(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.tagObjects[0].instance = this.childPalettes;
        this.context.ngAfterContentChecked(this);
    }
};
SymbolPaletteComponent.ɵfac = function SymbolPaletteComponent_Factory(t) { return new (t || SymbolPaletteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
SymbolPaletteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SymbolPaletteComponent, selectors: [["ejs-symbolpalette"]], contentQueries: function SymbolPaletteComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, PalettesDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childPalettes = _t.first);
    } }, inputs: { accessKey: "accessKey", allowDrag: "allowDrag", connectorDefaults: "connectorDefaults", enableAnimation: "enableAnimation", enablePersistence: "enablePersistence", enableRtl: "enableRtl", enableSearch: "enableSearch", expandMode: "expandMode", filterSymbols: "filterSymbols", getConnectorDefaults: "getConnectorDefaults", getNodeDefaults: "getNodeDefaults", getSymbolInfo: "getSymbolInfo", getSymbolTemplate: "getSymbolTemplate", height: "height", ignoreSymbolsOnSearch: "ignoreSymbolsOnSearch", locale: "locale", nodeDefaults: "nodeDefaults", palettes: "palettes", symbolDragSize: "symbolDragSize", symbolHeight: "symbolHeight", symbolInfo: "symbolInfo", symbolMargin: "symbolMargin", symbolPreview: "symbolPreview", symbolWidth: "symbolWidth", width: "width" }, outputs: { paletteSelectionChange: "paletteSelectionChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function SymbolPaletteComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/**
 * @nocollapse
 */
SymbolPaletteComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
];
SymbolPaletteComponent = __decorate$1([
    ComponentMixins([ComponentBase]),
    __metadata$1("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], SymbolPaletteComponent);

/**
 * NgModule definition for the SymbolPalette component.
 */
class SymbolPaletteModule {
}
SymbolPaletteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SymbolPaletteModule });
SymbolPaletteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SymbolPaletteModule_Factory(t) { return new (t || SymbolPaletteModule)(); }, imports: [[CommonModule]] });
/**
 * @nocollapse
 */
SymbolPaletteModule.ctorParameters = () => [];

/**
 * NgModule definition for the SymbolPalette component with providers.
 */
class SymbolPaletteAllModule {
}
SymbolPaletteAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SymbolPaletteAllModule });
SymbolPaletteAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SymbolPaletteAllModule_Factory(t) { return new (t || SymbolPaletteAllModule)(); }, providers: [], imports: [[CommonModule, SymbolPaletteModule],
        SymbolPaletteModule] });
/**
 * @nocollapse
 */
SymbolPaletteAllModule.ctorParameters = () => [];

var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const inputs$2 = ['enablePersistence', 'enableRtl', 'height', 'locale', 'sourceID', 'width'];
const outputs$10 = ['created'];
const twoWays$2 = [''];
/**
 * Overview Component
 * ```html
 * <ej-overview></ej-overview>
 * ```
 */
let OverviewComponent = class OverviewComponent extends Overview {
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    constructor(ngEle, srenderer, viewContainerRef, injector) {
        super();
        this.ngEle = ngEle;
        this.srenderer = srenderer;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.tags = [''];
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        this.registerEvents(outputs$10);
        this.addTwoWay.call(this, twoWays$2);
        setValue('currentInstance', this, this.viewContainerRef);
        this.context = new ComponentBase();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.context.ngOnInit(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.context.ngAfterViewInit(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.context.ngOnDestroy(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.context.ngAfterContentChecked(this);
    }
};
OverviewComponent.ɵfac = function OverviewComponent_Factory(t) { return new (t || OverviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
OverviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: OverviewComponent, selectors: [["ejs-overview"]], inputs: { enablePersistence: "enablePersistence", enableRtl: "enableRtl", height: "height", locale: "locale", sourceID: "sourceID", width: "width" }, outputs: { created: "created" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function OverviewComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/**
 * @nocollapse
 */
OverviewComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
];
OverviewComponent = __decorate$2([
    ComponentMixins([ComponentBase]),
    __metadata$2("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], OverviewComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayerDirective, [{
        type: Directive,
        args: [{
                selector: 'e-layers>e-layer',
                inputs: input,
                outputs: outputs,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayersDirective, [{
        type: Directive,
        args: [{
                selector: 'ej-diagram>e-layers',
                queries: {
                    children: new ContentChildren(LayerDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomCursorDirective, [{
        type: Directive,
        args: [{
                selector: 'e-cursormaps>e-cursormap',
                inputs: input$1,
                outputs: outputs$1,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomCursorsDirective, [{
        type: Directive,
        args: [{
                selector: 'ej-diagram>e-cursormaps',
                queries: {
                    children: new ContentChildren(CustomCursorDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConnectorAnnotationDirective, [{
        type: Directive,
        args: [{
                selector: 'e-connector>e-connector-annotations>e-connector-annotation',
                inputs: input$2,
                outputs: outputs$2,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConnectorAnnotationsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-connector>e-connector-annotations',
                queries: {
                    children: new ContentChildren(ConnectorAnnotationDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConnectorDirective, [{
        type: Directive,
        args: [{
                selector: 'e-connectors>e-connector',
                inputs: input$3,
                outputs: outputs$3,
                queries: {
                    childAnnotations: new ContentChild(ConnectorAnnotationsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConnectorsDirective, [{
        type: Directive,
        args: [{
                selector: 'ej-diagram>e-connectors',
                queries: {
                    children: new ContentChildren(ConnectorDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeAnnotationDirective, [{
        type: Directive,
        args: [{
                selector: 'e-node>e-node-annotations>e-node-annotation',
                inputs: input$4,
                outputs: outputs$4,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeAnnotationsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-node>e-node-annotations',
                queries: {
                    children: new ContentChildren(NodeAnnotationDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortDirective, [{
        type: Directive,
        args: [{
                selector: 'e-node>e-node-ports>e-node-port',
                inputs: input$5,
                outputs: outputs$5,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-node>e-node-ports',
                queries: {
                    children: new ContentChildren(PortDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeDirective, [{
        type: Directive,
        args: [{
                selector: 'e-nodes>e-node',
                inputs: input$6,
                outputs: outputs$6,
                queries: {
                    childAnnotations: new ContentChild(NodeAnnotationsDirective),
                    childPorts: new ContentChild(PortsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodesDirective, [{
        type: Directive,
        args: [{
                selector: 'ej-diagram>e-nodes',
                queries: {
                    children: new ContentChildren(NodeDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DiagramComponent, [{
        type: Component,
        args: [{
                selector: 'ejs-diagram',
                inputs: inputs,
                outputs: outputs$7,
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {
                    childLayers: new ContentChild(LayersDirective),
                    childCustomCursor: new ContentChild(CustomCursorsDirective),
                    childConnectors: new ContentChild(ConnectorsDirective),
                    childNodes: new ContentChild(NodesDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { annotationTemplate: [{
            type: ContentChild,
            args: ['annotationTemplate']
        }], nodeTemplate: [{
            type: ContentChild,
            args: ['nodeTemplate']
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DiagramModule, { declarations: function () { return [DiagramComponent,
        LayerDirective,
        LayersDirective,
        CustomCursorDirective,
        CustomCursorsDirective,
        ConnectorAnnotationDirective,
        ConnectorAnnotationsDirective,
        ConnectorDirective,
        ConnectorsDirective,
        NodeAnnotationDirective,
        NodeAnnotationsDirective,
        PortDirective,
        PortsDirective,
        NodeDirective,
        NodesDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [DiagramComponent,
        LayerDirective,
        LayersDirective,
        CustomCursorDirective,
        CustomCursorsDirective,
        ConnectorAnnotationDirective,
        ConnectorAnnotationsDirective,
        ConnectorDirective,
        ConnectorsDirective,
        NodeAnnotationDirective,
        NodeAnnotationsDirective,
        PortDirective,
        PortsDirective,
        NodeDirective,
        NodesDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DiagramModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    DiagramComponent,
                    LayerDirective,
                    LayersDirective,
                    CustomCursorDirective,
                    CustomCursorsDirective,
                    ConnectorAnnotationDirective,
                    ConnectorAnnotationsDirective,
                    ConnectorDirective,
                    ConnectorsDirective,
                    NodeAnnotationDirective,
                    NodeAnnotationsDirective,
                    PortDirective,
                    PortsDirective,
                    NodeDirective,
                    NodesDirective
                ],
                exports: [
                    DiagramComponent,
                    LayerDirective,
                    LayersDirective,
                    CustomCursorDirective,
                    CustomCursorsDirective,
                    ConnectorAnnotationDirective,
                    ConnectorAnnotationsDirective,
                    ConnectorDirective,
                    ConnectorsDirective,
                    NodeAnnotationDirective,
                    NodeAnnotationsDirective,
                    PortDirective,
                    PortsDirective,
                    NodeDirective,
                    NodesDirective
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DiagramAllModule, { imports: function () { return [CommonModule,
        DiagramModule]; }, exports: function () { return [DiagramModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DiagramAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, DiagramModule],
                exports: [
                    DiagramModule
                ],
                providers: [
                    HierarchicalTreeService,
                    MindMapService,
                    RadialTreeService,
                    ComplexHierarchicalTreeService,
                    DataBindingService,
                    SnappingService,
                    PrintAndExportService,
                    BpmnDiagramsService,
                    SymmetricLayoutService,
                    ConnectorBridgingService,
                    UndoRedoService,
                    LayoutAnimationService,
                    DiagramContextMenuService,
                    LineRoutingService,
                    ConnectorEditingService
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PaletteDirective, [{
        type: Directive,
        args: [{
                selector: 'e-palettes>e-palette',
                inputs: input$7,
                outputs: outputs$8,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PalettesDirective, [{
        type: Directive,
        args: [{
                selector: 'ejs-symbolpalette>e-palettes',
                queries: {
                    children: new ContentChildren(PaletteDirective)
                }
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SymbolPaletteComponent, [{
        type: Component,
        args: [{
                selector: 'ejs-symbolpalette',
                inputs: inputs$1,
                outputs: outputs$9,
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {
                    childPalettes: new ContentChild(PalettesDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SymbolPaletteModule, { declarations: function () { return [SymbolPaletteComponent,
        PaletteDirective,
        PalettesDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SymbolPaletteComponent,
        PaletteDirective,
        PalettesDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SymbolPaletteModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    SymbolPaletteComponent,
                    PaletteDirective,
                    PalettesDirective
                ],
                exports: [
                    SymbolPaletteComponent,
                    PaletteDirective,
                    PalettesDirective
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SymbolPaletteAllModule, { imports: function () { return [CommonModule,
        SymbolPaletteModule]; }, exports: function () { return [SymbolPaletteModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SymbolPaletteAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, SymbolPaletteModule],
                exports: [
                    SymbolPaletteModule
                ],
                providers: []
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverviewComponent, [{
        type: Component,
        args: [{
                selector: 'ejs-overview',
                inputs: inputs$2,
                outputs: outputs$10,
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();

/**
 * NgModule definition for the Overview component.
 */
class OverviewModule {
}
OverviewModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverviewModule });
OverviewModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverviewModule_Factory(t) { return new (t || OverviewModule)(); }, imports: [[CommonModule]] });
/**
 * @nocollapse
 */
OverviewModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverviewModule, { declarations: function () { return [OverviewComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [OverviewComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverviewModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    OverviewComponent
                ],
                exports: [
                    OverviewComponent
                ]
            }]
    }], null, null); })();

/**
 * NgModule definition for the Overview component with providers.
 */
class OverviewAllModule {
}
OverviewAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverviewAllModule });
OverviewAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverviewAllModule_Factory(t) { return new (t || OverviewAllModule)(); }, providers: [], imports: [[CommonModule, OverviewModule],
        OverviewModule] });
/**
 * @nocollapse
 */
OverviewAllModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverviewAllModule, { imports: function () { return [CommonModule,
        OverviewModule]; }, exports: function () { return [OverviewModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverviewAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, OverviewModule],
                exports: [
                    OverviewModule
                ],
                providers: []
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { LayerDirective, LayersDirective, CustomCursorDirective, CustomCursorsDirective, ConnectorAnnotationDirective, ConnectorAnnotationsDirective, ConnectorDirective, ConnectorsDirective, NodeAnnotationDirective, NodeAnnotationsDirective, PortDirective, PortsDirective, NodeDirective, NodesDirective, DiagramComponent, DiagramModule, DiagramAllModule, HierarchicalTreeService, MindMapService, RadialTreeService, ComplexHierarchicalTreeService, DataBindingService, SnappingService, PrintAndExportService, BpmnDiagramsService, SymmetricLayoutService, ConnectorBridgingService, UndoRedoService, LayoutAnimationService, DiagramContextMenuService, LineRoutingService, ConnectorEditingService, PaletteDirective, PalettesDirective, SymbolPaletteComponent, SymbolPaletteModule, SymbolPaletteAllModule, OverviewComponent, OverviewModule, OverviewAllModule, inputs as ɵa, outputs$7 as ɵb, inputs$2 as ɵe, outputs$10 as ɵf, inputs$1 as ɵc, outputs$9 as ɵd };
export { Diagram, PrintAndExport, Size, Rect, MatrixTypes, Matrix, identityMatrix, transformPointByMatrix, transformPointsByMatrix, rotateMatrix, scaleMatrix, translateMatrix, multiplyMatrix, Point, BlazorAction, PortVisibility, SnapConstraints, SelectorConstraints, ConnectorConstraints, AnnotationConstraints, NodeConstraints, ElementAction, ThumbsConstraints, DiagramConstraints, DiagramTools, Transform, RenderMode, KeyModifiers, Keys, DiagramAction, RendererAction, RealAction, NoOfSegments, DiagramEvent, PortConstraints, contextMenuClick, contextMenuOpen, contextMenuBeforeItemRender, Thickness, Margin, Shadow, Stop, Gradient, DiagramGradient, LinearGradient, RadialGradient, ShapeStyle, StrokeStyle, TextStyle, DiagramShapeStyle, DiagramElement, PathElement, ImageElement, TextElement, Container, Canvas, GridPanel, RowDefinition, ColumnDefinition, GridRow, GridCell, StackPanel, findConnectorPoints, swapBounds, findAngle, findPoint, getIntersection, getIntersectionPoints, orthoConnection2Segment, getPortDirection, getOuterBounds, getOppositeDirection, processPathData, parsePathData, getRectanglePath, getPolygonPath, pathSegmentCollection, transformPath, updatedSegment, scalePathData, splitArrayCollection, getPathString, getString, randomId, getIndex, templateCompiler, cornersPointsBeforeRotation, getBounds, cloneObject, getInternalProperties, cloneArray, extendObject, extendArray, textAlignToString, wordBreakToString, bBoxText, middleElement, overFlow, whiteSpaceToString, rotateSize, rotatePoint, getOffset, getFunction, completeRegion, findNodeByName, findObjectType, setSwimLaneDefaults, getSpaceValue, getInterval, setUMLActivityDefaults, setConnectorDefaults, findNearestPoint, isDiagramChild, groupHasType, updateDefaultValues, updateLayoutValue, isPointOverConnector, intersect3, intersect2, getLineSegment, getPoints, getTooltipOffset, sort, getAnnotationPosition, getOffsetOfConnector, getAlignedPosition, alignLabelOnSegments, getBezierDirection, removeChildNodes, serialize, deserialize, upgrade, updateStyle, updateHyperlink, updateShapeContent, updateShape, updateContent, updateUmlActivityNode, getUMLFinalNode, getUMLActivityShapes, removeGradient, removeItem, updateConnector, getUserHandlePosition, canResizeCorner, canShowCorner, checkPortRestriction, findAnnotation, findPort, getInOutConnectPorts, findObjectIndex, getObjectFromCollection, scaleElement, arrangeChild, insertObject, getElement, getCollectionChangeEventArguements, getDropEventArguements, getPoint, getObjectType, flipConnector, updatePortEdges, alignElement, cloneSelectedObjects, updatePathElement, checkPort, findPath, findDistance, cloneBlazorObject, checkBrowserInfo, canMeasureDecoratorPath, CanvasRenderer, DiagramRenderer, DataBinding, getBasicShape, getPortShape, getDecoratorShape, getIconShape, getFlowShape, Hyperlink, Annotation, ShapeAnnotation, PathAnnotation, Port, PointPort, menuClass, DiagramContextMenu, Shape, Path, Native, Html, Image, Text, BasicShape, FlowShape, BpmnGateway, BpmnDataObject, BpmnTask, BpmnEvent, BpmnSubEvent, BpmnTransactionSubProcess, BpmnSubProcess, BpmnActivity, BpmnAnnotation, BpmnShape, UmlActivityShape, MethodArguments, UmlClassAttribute, UmlClassMethod, UmlClass, UmlInterface, UmlEnumerationMember, UmlEnumeration, UmlClassifierShape, DiagramShape, Node, Header, Lane, Phase, SwimLane, ChildContainer, Selector, BpmnDiagrams, getBpmnShapePathData, getBpmnTriggerShapePathData, getBpmnGatewayShapePathData, getBpmnTaskShapePathData, getBpmnLoopShapePathData, Decorator, Vector, ConnectorShape, ActivityFlow, BpmnFlow, ConnectorSegment, StraightSegment, BezierSegment, OrthogonalSegment, DiagramConnectorSegment, getDirection, isEmptyVector, getBezierPoints, getBezierBounds, bezierPoints, MultiplicityLabel, ClassifierMultiplicity, RelationShip, DiagramConnectorShape, Connector, ConnectorBridging, Snapping, UndoRedo, DiagramTooltip, initTooltip, updateTooltip, LayoutAnimation, SymbolSize, UserHandle, ToolBase, SelectTool, ConnectTool, MoveTool, RotateTool, ResizeTool, NodeDrawingTool, ConnectorDrawingTool, TextDrawingTool, ZoomPanTool, ExpandTool, LabelTool, PolygonDrawingTool, PolyLineDrawingTool, LabelDragTool, LabelResizeTool, LabelRotateTool, DiagramEventHandler, CommandHandler, findToolToActivate, findPortToolToActivate, contains, hasSelection, hasSingleConnection, isSelected, getCursor, ConnectorEditing, updateCanvasBounds, removeChildInContainer, findBounds, createHelper, renderContainerHelper, checkParentAsContainer, checkChildNodeInContainer, addChildToContainer, updateLaneBoundsAfterAddChild, renderStackHighlighter, moveChildInStack, LineRouting, CrudAction, ConnectionDataSource, DataSource, Gridlines, SnapSettings, KeyGesture, Command, CommandManager, ContextMenuSettings, CustomCursorAction, DataMappingItems, Layout, MindMap, HierarchicalTree, RadialTree, GraphForceNode, SymmetricLayout, GraphLayoutManager, ComplexHierarchicalTree, Palette, SymbolDragSize, SymbolPreview, SymbolPalette, Ruler, Overview } from '@syncfusion/ej2-diagrams';

//# sourceMappingURL=ej2-angular-diagrams.js.map