import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Nodes Directive
 * ```html
 * <e-nodes>
 * <e-node>
 * <e-node-ports>
 * <e-node-port>
 * </e-node-port>
 * </e-node-ports>
 * </e-node>
 * </e-nodes>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class PortDirective extends ComplexBase<PortDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Allows the user to save custom information/data about a port
     * @aspdefaultvalueignore
     * @blazordefaultvalueignore
     * @default undefined
     */
    addInfo: any;
    /**
     * Defines the constraints of port
     * @default 'Default'
     * @aspnumberenum
     * @blazornumberenum
     */
    constraints: any;
    /**
     * Sets the height of the port
     * @default 12
     */
    height: any;
    /**
     * Sets the horizontal alignment of the port with respect to its immediate parent(node/connector)
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment: any;
    /**
     * Defines the unique id of the port
     * @default ''
     */
    id: any;
    /**
     * Defines the collection of the objects that are connected to a particular port
     * @default undefined
     * @blazordefaultvalue new string[] { }
     */
    inEdges: any;
    /**
     * Defines the space that the port has to be moved from its actual position
     * @default new Margin(0,0,0,0)
     */
    margin: any;
    /**
     * Defines the position of the port with respect to the boundaries of nodes/connector
     * @default new Point(0.5,0.5)
     * @blazortype NodePortOffset
     */
    offset: any;
    /**
     * Defines the collection of the objects that are connected to a particular port
     * @default undefined
     * @blazordefaultvalue new string[] { }
     */
    outEdges: any;
    /**
     * Defines the geometry of the port
     * @default ''
     */
    pathData: any;
    /**
     * Defines the type of the port shape
     * * X - Sets the decorator shape as X
     * * Circle - Sets the decorator shape as Circle
     * * Square - Sets the decorator shape as Square
     * * Custom - Sets the decorator shape as Custom
     * @default 'Square'
     */
    shape: any;
    /**
     * Defines the appearance of the port
     *
     * @default {}
     */
    style: any;
    /**
     * Sets the vertical alignment of the port with respect to its immediate parent(node/connector)
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment: any;
    /**
     * Defines the type of the port visibility
     * * Visible - Always shows the port
     * * Hidden - Always hides the port
     * * Hover - Shows the port when the mouse hovers over a node
     * * Connect - Shows the port when a connection end point is dragged over a node
     * @default 'Connect'
     * @aspnumberenum
     * @blazornumberenum
     */
    visibility: any;
    /**
     * Sets the width of the port
     * @default 12
     */
    width: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PortDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PortDirective, "e-node>e-node-ports>e-node-port", never, { "addInfo": "addInfo"; "constraints": "constraints"; "height": "height"; "horizontalAlignment": "horizontalAlignment"; "id": "id"; "inEdges": "inEdges"; "margin": "margin"; "offset": "offset"; "outEdges": "outEdges"; "pathData": "pathData"; "shape": "shape"; "style": "style"; "verticalAlignment": "verticalAlignment"; "visibility": "visibility"; "width": "width"; }, {}, never>;
}
/**
 * Port Array Directive
 * @private
 */
export declare class PortsDirective extends ArrayBase<PortsDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PortsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PortsDirective, "e-node>e-node-ports", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInBvcnRzLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG4vKipcbiAqIE5vZGVzIERpcmVjdGl2ZVxuICogYGBgaHRtbFxuICogPGUtbm9kZXM+XG4gKiA8ZS1ub2RlPlxuICogPGUtbm9kZS1wb3J0cz5cbiAqIDxlLW5vZGUtcG9ydD5cbiAqIDwvZS1ub2RlLXBvcnQ+XG4gKiA8L2Utbm9kZS1wb3J0cz5cbiAqIDwvZS1ub2RlPlxuICogPC9lLW5vZGVzPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvcnREaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxQb3J0RGlyZWN0aXZlPiB7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRoZSB1c2VyIHRvIHNhdmUgY3VzdG9tIGluZm9ybWF0aW9uL2RhdGEgYWJvdXQgYSBwb3J0XG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZWlnbm9yZVxuICAgICAqIEBibGF6b3JkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBhZGRJbmZvOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgY29uc3RyYWludHMgb2YgcG9ydFxuICAgICAqIEBkZWZhdWx0ICdEZWZhdWx0J1xuICAgICAqIEBhc3BudW1iZXJlbnVtXG4gICAgICogQGJsYXpvcm51bWJlcmVudW1cbiAgICAgKi9cbiAgICBjb25zdHJhaW50czogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhlaWdodCBvZiB0aGUgcG9ydFxuICAgICAqIEBkZWZhdWx0IDEyXG4gICAgICovXG4gICAgaGVpZ2h0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgdGhlIHBvcnQgd2l0aCByZXNwZWN0IHRvIGl0cyBpbW1lZGlhdGUgcGFyZW50KG5vZGUvY29ubmVjdG9yKVxuICAgICAqICogU3RyZXRjaCAtIFN0cmV0Y2hlcyB0aGUgZGlhZ3JhbSBlbGVtZW50IHRocm91Z2hvdXQgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiAqIExlZnQgLSBBbGlnbnMgdGhlIGRpYWdyYW0gZWxlbWVudCBhdCB0aGUgbGVmdCBvZiBpdHMgaW1tZWRpYXRlIHBhcmVudFxuICAgICAqICogUmlnaHQgLSBBbGlnbnMgdGhlIGRpYWdyYW0gZWxlbWVudCBhdCB0aGUgcmlnaHQgb2YgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiAqIENlbnRlciAtIEFsaWducyB0aGUgZGlhZ3JhbSBlbGVtZW50IGF0IHRoZSBjZW50ZXIgb2YgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiAqIEF1dG8gLSBBbGlnbnMgdGhlIGRpYWdyYW0gZWxlbWVudCBiYXNlZCBvbiB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGl0cyBpbW1lZGlhdGUgcGFyZW50XG4gICAgICogQGRlZmF1bHQgJ0NlbnRlcidcbiAgICAgKi9cbiAgICBob3Jpem9udGFsQWxpZ25tZW50OiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdW5pcXVlIGlkIG9mIHRoZSBwb3J0XG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBpZDogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGNvbGxlY3Rpb24gb2YgdGhlIG9iamVjdHMgdGhhdCBhcmUgY29ubmVjdGVkIHRvIGEgcGFydGljdWxhciBwb3J0XG4gICAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAgICogQGJsYXpvcmRlZmF1bHR2YWx1ZSBuZXcgc3RyaW5nW10geyB9XG4gICAgICovXG4gICAgaW5FZGdlczogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHNwYWNlIHRoYXQgdGhlIHBvcnQgaGFzIHRvIGJlIG1vdmVkIGZyb20gaXRzIGFjdHVhbCBwb3NpdGlvblxuICAgICAqIEBkZWZhdWx0IG5ldyBNYXJnaW4oMCwwLDAsMClcbiAgICAgKi9cbiAgICBtYXJnaW46IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9ydCB3aXRoIHJlc3BlY3QgdG8gdGhlIGJvdW5kYXJpZXMgb2Ygbm9kZXMvY29ubmVjdG9yXG4gICAgICogQGRlZmF1bHQgbmV3IFBvaW50KDAuNSwwLjUpXG4gICAgICogQGJsYXpvcnR5cGUgTm9kZVBvcnRPZmZzZXRcbiAgICAgKi9cbiAgICBvZmZzZXQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjb2xsZWN0aW9uIG9mIHRoZSBvYmplY3RzIHRoYXQgYXJlIGNvbm5lY3RlZCB0byBhIHBhcnRpY3VsYXIgcG9ydFxuICAgICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgICAqIEBibGF6b3JkZWZhdWx0dmFsdWUgbmV3IHN0cmluZ1tdIHsgfVxuICAgICAqL1xuICAgIG91dEVkZ2VzOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZ2VvbWV0cnkgb2YgdGhlIHBvcnRcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHBhdGhEYXRhOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdHlwZSBvZiB0aGUgcG9ydCBzaGFwZVxuICAgICAqICogWCAtIFNldHMgdGhlIGRlY29yYXRvciBzaGFwZSBhcyBYXG4gICAgICogKiBDaXJjbGUgLSBTZXRzIHRoZSBkZWNvcmF0b3Igc2hhcGUgYXMgQ2lyY2xlXG4gICAgICogKiBTcXVhcmUgLSBTZXRzIHRoZSBkZWNvcmF0b3Igc2hhcGUgYXMgU3F1YXJlXG4gICAgICogKiBDdXN0b20gLSBTZXRzIHRoZSBkZWNvcmF0b3Igc2hhcGUgYXMgQ3VzdG9tXG4gICAgICogQGRlZmF1bHQgJ1NxdWFyZSdcbiAgICAgKi9cbiAgICBzaGFwZTogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHBvcnRcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IHt9XG4gICAgICovXG4gICAgc3R5bGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgdGhlIHBvcnQgd2l0aCByZXNwZWN0IHRvIGl0cyBpbW1lZGlhdGUgcGFyZW50KG5vZGUvY29ubmVjdG9yKVxuICAgICAqICogU3RyZXRjaCAtIFN0cmV0Y2hlcyB0aGUgZGlhZ3JhbSBlbGVtZW50IHRocm91Z2hvdXQgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiAqIFRvcCAtIEFsaWducyB0aGUgZGlhZ3JhbSBlbGVtZW50IGF0IHRoZSB0b3Agb2YgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiAqIEJvdHRvbSAtIEFsaWducyB0aGUgZGlhZ3JhbSBlbGVtZW50IGF0IHRoZSBib3R0b20gb2YgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiAqIENlbnRlciAtIEFsaWducyB0aGUgZGlhZ3JhbSBlbGVtZW50IGF0IHRoZSBjZW50ZXIgb2YgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiAqIEF1dG8gLSBBbGlnbnMgdGhlIGRpYWdyYW0gZWxlbWVudCBiYXNlZCBvbiB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGl0cyBpbW1lZGlhdGUgcGFyZW50XG4gICAgICogQGRlZmF1bHQgJ0NlbnRlcidcbiAgICAgKi9cbiAgICB2ZXJ0aWNhbEFsaWdubWVudDogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHR5cGUgb2YgdGhlIHBvcnQgdmlzaWJpbGl0eVxuICAgICAqICogVmlzaWJsZSAtIEFsd2F5cyBzaG93cyB0aGUgcG9ydFxuICAgICAqICogSGlkZGVuIC0gQWx3YXlzIGhpZGVzIHRoZSBwb3J0XG4gICAgICogKiBIb3ZlciAtIFNob3dzIHRoZSBwb3J0IHdoZW4gdGhlIG1vdXNlIGhvdmVycyBvdmVyIGEgbm9kZVxuICAgICAqICogQ29ubmVjdCAtIFNob3dzIHRoZSBwb3J0IHdoZW4gYSBjb25uZWN0aW9uIGVuZCBwb2ludCBpcyBkcmFnZ2VkIG92ZXIgYSBub2RlXG4gICAgICogQGRlZmF1bHQgJ0Nvbm5lY3QnXG4gICAgICogQGFzcG51bWJlcmVudW1cbiAgICAgKiBAYmxhem9ybnVtYmVyZW51bVxuICAgICAqL1xuICAgIHZpc2liaWxpdHk6IGFueTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB3aWR0aCBvZiB0aGUgcG9ydFxuICAgICAqIEBkZWZhdWx0IDEyXG4gICAgICovXG4gICAgd2lkdGg6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKTtcbn1cbi8qKlxuICogUG9ydCBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvcnRzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPFBvcnRzRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKTtcbn1cbiJdfQ==