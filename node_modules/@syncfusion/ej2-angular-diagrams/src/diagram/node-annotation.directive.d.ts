import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Nodes Directive
 * ```html
 * <e-nodes>
 * <e-node>
 * <e-node-annotations>
 * <e-node-annotation>
 * </e-node-annotation>
 * </e-node-annotations>
 * </e-node>
 * </e-nodes>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class NodeAnnotationDirective extends ComplexBase<NodeAnnotationDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Sets the type of the annotation
     *  * Shape - Sets the annotation type as Shape
     *  * Path - Sets the annotation type as Path
     * @default 'Shape'
     */
    type: any;
    /**
     * Allows the user to save custom information/data about an annotation
     *
     * @aspdefaultvalueignore
     * @blazordefaultvalueignore
     * @default undefined
     */
    addInfo: any;
    /**
     *  Defines the type of annotation template
     * String -  Defines annotation template to be in string
     * Template - Defines annotation template to be in html content
     * @default 'String'
     */
    annotationType: any;
    /**
     * Enables or disables the default behaviors of the label.
     * * ReadOnly - Enables/Disables the ReadOnly Constraints
     * * InheritReadOnly - Enables/Disables the InheritReadOnly Constraints
     * @default 'InheritReadOnly'
     * @aspnumberenum
     * @blazornumberenum
     */
    constraints: any;
    /**
     * Sets the textual description of the node/connector
     * @default ''
     */
    content: any;
    /**
     * Sets the space to be left between an annotation and its parent node/connector
     * @default new Margin(20,20,20,20)
     */
    dragLimit: any;
    /**
     * Sets the height of the text
     * @aspdefaultvalueignore
     * @blazordefaultvalueignore
     * @default undefined
     */
    height: any;
    /**
     * Sets the horizontal alignment of the text with respect to the parent node/connector
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Left - Aligns the diagram element at the left of its immediate parent
     * * Right - Aligns the diagram element at the right of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    horizontalAlignment: any;
    /**
     * Sets the hyperlink of the label
     *
     * @aspdefaultvalueignore
     * @blazordefaultvalueignore
     * @default undefined
     */
    hyperlink: any;
    /**
     * Defines the unique id of the annotation
     * @default ''
     */
    id: any;
    /**
     * Sets the space to be left between an annotation and its parent node/connector
     * @default new Margin(0,0,0,0)
     */
    margin: any;
    /**
     * Sets the position of the annotation with respect to its parent bounds
     * @default { x: 0.5, y: 0.5 }
     * @blazortype NodeAnnotationOffset
     */
    offset: any;
    /**
     * Sets the rotate angle of the text
     * @default 0
     */
    rotateAngle: any;
    /**
     * Defines the appearance of the text
     * @default new TextStyle()
     * @blazortype AnnotationStyle
     */
    style: any;
    /**
     * Sets the textual description of the node/connector
     * @default 'undefined'
     */
    template: any;
    /**
     * Sets the vertical alignment of the text with respect to the parent node/connector
     * * Stretch - Stretches the diagram element throughout its immediate parent
     * * Top - Aligns the diagram element at the top of its immediate parent
     * * Bottom - Aligns the diagram element at the bottom of its immediate parent
     * * Center - Aligns the diagram element at the center of its immediate parent
     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent
     * @default 'Center'
     */
    verticalAlignment: any;
    /**
     * Defines the visibility of the label
     * @default true
     */
    visibility: any;
    /**
     * Sets the width of the text
     * @aspdefaultvalueignore
     * @blazordefaultvalueignore
     * @default undefined
     */
    width: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NodeAnnotationDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NodeAnnotationDirective, "e-node>e-node-annotations>e-node-annotation", never, { "addInfo": "addInfo"; "annotationType": "annotationType"; "constraints": "constraints"; "content": "content"; "dragLimit": "dragLimit"; "height": "height"; "horizontalAlignment": "horizontalAlignment"; "hyperlink": "hyperlink"; "id": "id"; "margin": "margin"; "offset": "offset"; "rotateAngle": "rotateAngle"; "style": "style"; "template": "template"; "type": "type"; "verticalAlignment": "verticalAlignment"; "visibility": "visibility"; "width": "width"; }, {}, never>;
}
/**
 * NodeAnnotation Array Directive
 * @private
 */
export declare class NodeAnnotationsDirective extends ArrayBase<NodeAnnotationsDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NodeAnnotationsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NodeAnnotationsDirective, "e-node>e-node-annotations", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1hbm5vdGF0aW9uLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJub2RlLWFubm90YXRpb24uZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG4vKipcbiAqIE5vZGVzIERpcmVjdGl2ZVxuICogYGBgaHRtbFxuICogPGUtbm9kZXM+XG4gKiA8ZS1ub2RlPlxuICogPGUtbm9kZS1hbm5vdGF0aW9ucz5cbiAqIDxlLW5vZGUtYW5ub3RhdGlvbj5cbiAqIDwvZS1ub2RlLWFubm90YXRpb24+XG4gKiA8L2Utbm9kZS1hbm5vdGF0aW9ucz5cbiAqIDwvZS1ub2RlPlxuICogPC9lLW5vZGVzPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5vZGVBbm5vdGF0aW9uRGlyZWN0aXZlIGV4dGVuZHMgQ29tcGxleEJhc2U8Tm9kZUFubm90YXRpb25EaXJlY3RpdmU+IHtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0eXBlIG9mIHRoZSBhbm5vdGF0aW9uXG4gICAgICogICogU2hhcGUgLSBTZXRzIHRoZSBhbm5vdGF0aW9uIHR5cGUgYXMgU2hhcGVcbiAgICAgKiAgKiBQYXRoIC0gU2V0cyB0aGUgYW5ub3RhdGlvbiB0eXBlIGFzIFBhdGhcbiAgICAgKiBAZGVmYXVsdCAnU2hhcGUnXG4gICAgICovXG4gICAgdHlwZTogYW55O1xuICAgIC8qKlxuICAgICAqIEFsbG93cyB0aGUgdXNlciB0byBzYXZlIGN1c3RvbSBpbmZvcm1hdGlvbi9kYXRhIGFib3V0IGFuIGFubm90YXRpb25cbiAgICAgKlxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKiBAYmxhem9yZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAgICovXG4gICAgYWRkSW5mbzogYW55O1xuICAgIC8qKlxuICAgICAqICBEZWZpbmVzIHRoZSB0eXBlIG9mIGFubm90YXRpb24gdGVtcGxhdGVcbiAgICAgKiBTdHJpbmcgLSAgRGVmaW5lcyBhbm5vdGF0aW9uIHRlbXBsYXRlIHRvIGJlIGluIHN0cmluZ1xuICAgICAqIFRlbXBsYXRlIC0gRGVmaW5lcyBhbm5vdGF0aW9uIHRlbXBsYXRlIHRvIGJlIGluIGh0bWwgY29udGVudFxuICAgICAqIEBkZWZhdWx0ICdTdHJpbmcnXG4gICAgICovXG4gICAgYW5ub3RhdGlvblR5cGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBkZWZhdWx0IGJlaGF2aW9ycyBvZiB0aGUgbGFiZWwuXG4gICAgICogKiBSZWFkT25seSAtIEVuYWJsZXMvRGlzYWJsZXMgdGhlIFJlYWRPbmx5IENvbnN0cmFpbnRzXG4gICAgICogKiBJbmhlcml0UmVhZE9ubHkgLSBFbmFibGVzL0Rpc2FibGVzIHRoZSBJbmhlcml0UmVhZE9ubHkgQ29uc3RyYWludHNcbiAgICAgKiBAZGVmYXVsdCAnSW5oZXJpdFJlYWRPbmx5J1xuICAgICAqIEBhc3BudW1iZXJlbnVtXG4gICAgICogQGJsYXpvcm51bWJlcmVudW1cbiAgICAgKi9cbiAgICBjb25zdHJhaW50czogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHR1YWwgZGVzY3JpcHRpb24gb2YgdGhlIG5vZGUvY29ubmVjdG9yXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBjb250ZW50OiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3BhY2UgdG8gYmUgbGVmdCBiZXR3ZWVuIGFuIGFubm90YXRpb24gYW5kIGl0cyBwYXJlbnQgbm9kZS9jb25uZWN0b3JcbiAgICAgKiBAZGVmYXVsdCBuZXcgTWFyZ2luKDIwLDIwLDIwLDIwKVxuICAgICAqL1xuICAgIGRyYWdMaW1pdDogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhlaWdodCBvZiB0aGUgdGV4dFxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKiBAYmxhem9yZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAgICovXG4gICAgaGVpZ2h0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgdGhlIHRleHQgd2l0aCByZXNwZWN0IHRvIHRoZSBwYXJlbnQgbm9kZS9jb25uZWN0b3JcbiAgICAgKiAqIFN0cmV0Y2ggLSBTdHJldGNoZXMgdGhlIGRpYWdyYW0gZWxlbWVudCB0aHJvdWdob3V0IGl0cyBpbW1lZGlhdGUgcGFyZW50XG4gICAgICogKiBMZWZ0IC0gQWxpZ25zIHRoZSBkaWFncmFtIGVsZW1lbnQgYXQgdGhlIGxlZnQgb2YgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiAqIFJpZ2h0IC0gQWxpZ25zIHRoZSBkaWFncmFtIGVsZW1lbnQgYXQgdGhlIHJpZ2h0IG9mIGl0cyBpbW1lZGlhdGUgcGFyZW50XG4gICAgICogKiBDZW50ZXIgLSBBbGlnbnMgdGhlIGRpYWdyYW0gZWxlbWVudCBhdCB0aGUgY2VudGVyIG9mIGl0cyBpbW1lZGlhdGUgcGFyZW50XG4gICAgICogKiBBdXRvIC0gQWxpZ25zIHRoZSBkaWFncmFtIGVsZW1lbnQgYmFzZWQgb24gdGhlIGNoYXJhY3RlcmlzdGljcyBvZiBpdHMgaW1tZWRpYXRlIHBhcmVudFxuICAgICAqIEBkZWZhdWx0ICdDZW50ZXInXG4gICAgICovXG4gICAgaG9yaXpvbnRhbEFsaWdubWVudDogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGh5cGVybGluayBvZiB0aGUgbGFiZWxcbiAgICAgKlxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKiBAYmxhem9yZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAgICovXG4gICAgaHlwZXJsaW5rOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdW5pcXVlIGlkIG9mIHRoZSBhbm5vdGF0aW9uXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBpZDogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNwYWNlIHRvIGJlIGxlZnQgYmV0d2VlbiBhbiBhbm5vdGF0aW9uIGFuZCBpdHMgcGFyZW50IG5vZGUvY29ubmVjdG9yXG4gICAgICogQGRlZmF1bHQgbmV3IE1hcmdpbigwLDAsMCwwKVxuICAgICAqL1xuICAgIG1hcmdpbjogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBhbm5vdGF0aW9uIHdpdGggcmVzcGVjdCB0byBpdHMgcGFyZW50IGJvdW5kc1xuICAgICAqIEBkZWZhdWx0IHsgeDogMC41LCB5OiAwLjUgfVxuICAgICAqIEBibGF6b3J0eXBlIE5vZGVBbm5vdGF0aW9uT2Zmc2V0XG4gICAgICovXG4gICAgb2Zmc2V0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcm90YXRlIGFuZ2xlIG9mIHRoZSB0ZXh0XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHJvdGF0ZUFuZ2xlOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgdGV4dFxuICAgICAqIEBkZWZhdWx0IG5ldyBUZXh0U3R5bGUoKVxuICAgICAqIEBibGF6b3J0eXBlIEFubm90YXRpb25TdHlsZVxuICAgICAqL1xuICAgIHN0eWxlOiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dHVhbCBkZXNjcmlwdGlvbiBvZiB0aGUgbm9kZS9jb25uZWN0b3JcbiAgICAgKiBAZGVmYXVsdCAndW5kZWZpbmVkJ1xuICAgICAqL1xuICAgIHRlbXBsYXRlOiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmVydGljYWwgYWxpZ25tZW50IG9mIHRoZSB0ZXh0IHdpdGggcmVzcGVjdCB0byB0aGUgcGFyZW50IG5vZGUvY29ubmVjdG9yXG4gICAgICogKiBTdHJldGNoIC0gU3RyZXRjaGVzIHRoZSBkaWFncmFtIGVsZW1lbnQgdGhyb3VnaG91dCBpdHMgaW1tZWRpYXRlIHBhcmVudFxuICAgICAqICogVG9wIC0gQWxpZ25zIHRoZSBkaWFncmFtIGVsZW1lbnQgYXQgdGhlIHRvcCBvZiBpdHMgaW1tZWRpYXRlIHBhcmVudFxuICAgICAqICogQm90dG9tIC0gQWxpZ25zIHRoZSBkaWFncmFtIGVsZW1lbnQgYXQgdGhlIGJvdHRvbSBvZiBpdHMgaW1tZWRpYXRlIHBhcmVudFxuICAgICAqICogQ2VudGVyIC0gQWxpZ25zIHRoZSBkaWFncmFtIGVsZW1lbnQgYXQgdGhlIGNlbnRlciBvZiBpdHMgaW1tZWRpYXRlIHBhcmVudFxuICAgICAqICogQXV0byAtIEFsaWducyB0aGUgZGlhZ3JhbSBlbGVtZW50IGJhc2VkIG9uIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgaXRzIGltbWVkaWF0ZSBwYXJlbnRcbiAgICAgKiBAZGVmYXVsdCAnQ2VudGVyJ1xuICAgICAqL1xuICAgIHZlcnRpY2FsQWxpZ25tZW50OiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgbGFiZWxcbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgdmlzaWJpbGl0eTogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHdpZHRoIG9mIHRoZSB0ZXh0XG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZWlnbm9yZVxuICAgICAqIEBibGF6b3JkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICAgKi9cbiAgICB3aWR0aDogYW55O1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpO1xufVxuLyoqXG4gKiBOb2RlQW5ub3RhdGlvbiBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5vZGVBbm5vdGF0aW9uc0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxOb2RlQW5ub3RhdGlvbnNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19