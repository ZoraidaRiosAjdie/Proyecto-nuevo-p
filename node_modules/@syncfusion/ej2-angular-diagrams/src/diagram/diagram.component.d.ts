import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { Diagram } from '@syncfusion/ej2-diagrams';
import { LayersDirective } from './layers.directive';
import { CustomCursorsDirective } from './customcursor.directive';
import { ConnectorsDirective } from './connectors.directive';
import { NodesDirective } from './nodes.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Diagram Component
 * ```html
 * <ej-diagram></ej-diagram>
 * ```
 */
export declare class DiagramComponent extends Diagram implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    childLayers: QueryList<LayersDirective>;
    childCustomCursor: QueryList<CustomCursorsDirective>;
    childConnectors: QueryList<ConnectorsDirective>;
    childNodes: QueryList<NodesDirective>;
    tags: string[];
    /**
     * Customizes the annotation template
     * @default undefined
     */
    annotationTemplate: any;
    /**
     * Customizes the node template
     * @default undefined
     */
    nodeTemplate: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DiagramComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DiagramComponent, "ejs-diagram", never, { "addInfo": "addInfo"; "annotationTemplate": "annotationTemplate"; "backgroundColor": "backgroundColor"; "bridgeDirection": "bridgeDirection"; "commandManager": "commandManager"; "connectorDefaults": "connectorDefaults"; "connectors": "connectors"; "constraints": "constraints"; "contextMenuSettings": "contextMenuSettings"; "customCursor": "customCursor"; "dataSourceSettings": "dataSourceSettings"; "drawingObject": "drawingObject"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "getConnectorDefaults": "getConnectorDefaults"; "getCustomCursor": "getCustomCursor"; "getCustomProperty": "getCustomProperty"; "getCustomTool": "getCustomTool"; "getDescription": "getDescription"; "getNodeDefaults": "getNodeDefaults"; "height": "height"; "historyManager": "historyManager"; "layers": "layers"; "layout": "layout"; "locale": "locale"; "mode": "mode"; "nodeDefaults": "nodeDefaults"; "nodeTemplate": "nodeTemplate"; "nodes": "nodes"; "pageSettings": "pageSettings"; "rulerSettings": "rulerSettings"; "scrollSettings": "scrollSettings"; "selectedItems": "selectedItems"; "serializationSettings": "serializationSettings"; "setNodeTemplate": "setNodeTemplate"; "snapSettings": "snapSettings"; "tool": "tool"; "tooltip": "tooltip"; "updateSelection": "updateSelection"; "width": "width"; }, { "animationComplete": "animationComplete"; "click": "click"; "collectionChange": "collectionChange"; "commandExecute": "commandExecute"; "connectionChange": "connectionChange"; "contextMenuBeforeItemRender": "contextMenuBeforeItemRender"; "contextMenuClick": "contextMenuClick"; "contextMenuOpen": "contextMenuOpen"; "created": "created"; "dataLoaded": "dataLoaded"; "doubleClick": "doubleClick"; "dragEnter": "dragEnter"; "dragLeave": "dragLeave"; "dragOver": "dragOver"; "drop": "drop"; "expandStateChange": "expandStateChange"; "historyChange": "historyChange"; "historyStateChange": "historyStateChange"; "keyDown": "keyDown"; "keyUp": "keyUp"; "mouseEnter": "mouseEnter"; "mouseLeave": "mouseLeave"; "mouseOver": "mouseOver"; "onImageLoad": "onImageLoad"; "onUserHandleMouseDown": "onUserHandleMouseDown"; "onUserHandleMouseEnter": "onUserHandleMouseEnter"; "onUserHandleMouseLeave": "onUserHandleMouseLeave"; "onUserHandleMouseUp": "onUserHandleMouseUp"; "positionChange": "positionChange"; "propertyChange": "propertyChange"; "rotateChange": "rotateChange"; "scrollChange": "scrollChange"; "segmentCollectionChange": "segmentCollectionChange"; "selectionChange": "selectionChange"; "sizeChange": "sizeChange"; "sourcePointChange": "sourcePointChange"; "targetPointChange": "targetPointChange"; "textEdit": "textEdit"; }, ["annotationTemplate", "nodeTemplate", "childLayers", "childCustomCursor", "childConnectors", "childNodes"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGlhZ3JhbS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFF1ZXJ5TGlzdCwgUmVuZGVyZXIyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNvbXBvbmVudEJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbmltcG9ydCB7IERpYWdyYW0gfSBmcm9tICdAc3luY2Z1c2lvbi9lajItZGlhZ3JhbXMnO1xuaW1wb3J0IHsgTGF5ZXJzRGlyZWN0aXZlIH0gZnJvbSAnLi9sYXllcnMuZGlyZWN0aXZlJztcbmltcG9ydCB7IEN1c3RvbUN1cnNvcnNEaXJlY3RpdmUgfSBmcm9tICcuL2N1c3RvbWN1cnNvci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ29ubmVjdG9yc0RpcmVjdGl2ZSB9IGZyb20gJy4vY29ubmVjdG9ycy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTm9kZXNEaXJlY3RpdmUgfSBmcm9tICcuL25vZGVzLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogRGlhZ3JhbSBDb21wb25lbnRcbiAqIGBgYGh0bWxcbiAqIDxlai1kaWFncmFtPjwvZWotZGlhZ3JhbT5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEaWFncmFtQ29tcG9uZW50IGV4dGVuZHMgRGlhZ3JhbSBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgY2hpbGRMYXllcnM6IFF1ZXJ5TGlzdDxMYXllcnNEaXJlY3RpdmU+O1xuICAgIGNoaWxkQ3VzdG9tQ3Vyc29yOiBRdWVyeUxpc3Q8Q3VzdG9tQ3Vyc29yc0RpcmVjdGl2ZT47XG4gICAgY2hpbGRDb25uZWN0b3JzOiBRdWVyeUxpc3Q8Q29ubmVjdG9yc0RpcmVjdGl2ZT47XG4gICAgY2hpbGROb2RlczogUXVlcnlMaXN0PE5vZGVzRGlyZWN0aXZlPjtcbiAgICB0YWdzOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBDdXN0b21pemVzIHRoZSBhbm5vdGF0aW9uIHRlbXBsYXRlXG4gICAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAgICovXG4gICAgYW5ub3RhdGlvblRlbXBsYXRlOiBhbnk7XG4gICAgLyoqXG4gICAgICogQ3VzdG9taXplcyB0aGUgbm9kZSB0ZW1wbGF0ZVxuICAgICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIG5vZGVUZW1wbGF0ZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKG5nRWxlOiBFbGVtZW50UmVmLCBzcmVuZGVyZXI6IFJlbmRlcmVyMiwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJFdmVudHM6IChldmVudExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICAgIGFkZFR3b1dheTogKHByb3BMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbn1cbiJdfQ==