import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Palette Directive
 * ```html
 * <e-palettes><e-palette></e-palette><e-palettes>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class PaletteDirective extends ComplexBase<PaletteDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Sets whether the palette items to be expanded or not
     * @default true
     */
    expanded: any;
    /**
     * Sets the height of the symbol group
     * @aspdefaultvalueignore
     * @blazordefaultvalueignore
     * @default undefined
     */
    height: any;
    /**
     * Defines the content of the symbol group
     * @default ''
     */
    iconCss: any;
    /**
     * Defines the unique id of a symbol group
     * @default ''
     */
    id: any;
    /**
     * Defines the collection of predefined symbols
     * @asptype object
     */
    symbols: any;
    /**
     * Defines the title of the symbol group
     * @default ''
     */
    title: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PaletteDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PaletteDirective, "e-palettes>e-palette", never, { "expanded": "expanded"; "height": "height"; "iconCss": "iconCss"; "id": "id"; "symbols": "symbols"; "title": "title"; }, {}, never>;
}
/**
 * Palette Array Directive
 * @private
 */
export declare class PalettesDirective extends ArrayBase<PalettesDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PalettesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PalettesDirective, "ejs-symbolpalette>e-palettes", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZXMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInBhbGV0dGVzLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG4vKipcbiAqIFBhbGV0dGUgRGlyZWN0aXZlXG4gKiBgYGBodG1sXG4gKiA8ZS1wYWxldHRlcz48ZS1wYWxldHRlPjwvZS1wYWxldHRlPjxlLXBhbGV0dGVzPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhbGV0dGVEaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxQYWxldHRlRGlyZWN0aXZlPiB7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB3aGV0aGVyIHRoZSBwYWxldHRlIGl0ZW1zIHRvIGJlIGV4cGFuZGVkIG9yIG5vdFxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBleHBhbmRlZDogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhlaWdodCBvZiB0aGUgc3ltYm9sIGdyb3VwXG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZWlnbm9yZVxuICAgICAqIEBibGF6b3JkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBoZWlnaHQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjb250ZW50IG9mIHRoZSBzeW1ib2wgZ3JvdXBcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIGljb25Dc3M6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSB1bmlxdWUgaWQgb2YgYSBzeW1ib2wgZ3JvdXBcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIGlkOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgY29sbGVjdGlvbiBvZiBwcmVkZWZpbmVkIHN5bWJvbHNcbiAgICAgKiBAYXNwdHlwZSBvYmplY3RcbiAgICAgKi9cbiAgICBzeW1ib2xzOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdGl0bGUgb2YgdGhlIHN5bWJvbCBncm91cFxuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICovXG4gICAgdGl0bGU6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKTtcbn1cbi8qKlxuICogUGFsZXR0ZSBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhbGV0dGVzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPFBhbGV0dGVzRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKTtcbn1cbiJdfQ==